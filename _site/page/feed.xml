<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>RSS - 婷婷的博客</title>
    <description>婷婷的博客 - </description>
    <link>https://tingtinZ.github.io</link>
    <atom:link href="https://tingtinZ.github.io/page/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 25 Jul 2017 17:06:46 +0800</pubDate>
    <lastBuildDate>Tue, 25 Jul 2017 17:06:46 +0800</lastBuildDate>
    <generator></generator>
    
      <item>
        <title>Linux学习小记</title>
        <description>&lt;h1 id=&quot;linux学习小记&quot;&gt;Linux学习小记&lt;/h1&gt;

&lt;p&gt;Linux是Torvalds先生所开发出来的，基于GPL的版权宣告之下，可以在x86的架构下运作，也可以被移植到其他的大型主机上面的操作系统。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;linux-的特色&quot;&gt;Linux 的特色&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;自由与开放的使用与学习环境，自由修改原始码。&lt;/li&gt;
  &lt;li&gt;配备需求低廉。&lt;/li&gt;
  &lt;li&gt;核心功能强大而稳定。&lt;/li&gt;
  &lt;li&gt;独立作业。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;linux在安全方面的优势&quot;&gt;Linux在安全方面的优势&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;发行版的数量极多。&lt;/p&gt;

    &lt;p&gt;通俗地说：Linux 只是一个操作系统内核（Linux kernel），并不是一个操作系统。所谓的“发行版”，就是在 Linux kernel 的基础上，再加装相应的辅助性软件，使之成为一个“可用的”操作系统。&lt;/p&gt;

    &lt;p&gt;Linux区别于其他操作系统的一大特色是：非常多的发行版，不同的发行版差别非常大，降低了攻击面的”确定性“。发行版的差别不光体现在“预装的应用软件不同”，还体现在“内核的版本不同”，还体现在“内核的编译参数不同”。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;具有高度可定制性。&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Linux 的某些发行版可以比较方便地重编译内核。通过编译内核，可以把很多不需要的内核模块去掉（禁掉）。&lt;/li&gt;
      &lt;li&gt;Linux 可以裁剪到”极致“，甚至把系统裁剪到只有几兆。&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;其高度的可定制性，使得降低了攻击面的”确定性“。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;支持多样化的硬件（CPU/主板/等），规避硬件的”单点风险“。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Linux是开源的。&lt;/p&gt;

    &lt;p&gt;开源带来的好处之一是有助于代码审查。正是LInux 的完全开源，让程序员和安全研究人员都可以看这些源代码，发现安全隐患的概率就会大大提升。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Linux有更完善的软件包管机制。&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;提供的软件包较可靠。&lt;/li&gt;
      &lt;li&gt;自带”文件校验“的方式。如果软件在下载过程中被篡改了，在安装之前就会被发现。&lt;/li&gt;
      &lt;li&gt;实现”自动升级“，大大降低安全漏洞的风险。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;相比于Windows更严格的”文件权限“。&lt;/p&gt;

    &lt;p&gt;Linux根据专有的”可执行权限“决定文件是否可以运行，与扩展名无关。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;linux-的应用领域&quot;&gt;Linux 的应用领域&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Linux在企业应用方面，着重于”网路服务器“，”关键任务的应用(金融数据库、大型企业网管环境)“及”高效能运算”等任务。&lt;/li&gt;
  &lt;li&gt;Linux在个人环境的使用上，着重于：桌面计算机、手持系统(PDA、手机)、嵌入式设备(如家电用品等)。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;各硬件装置在linux中的档名&quot;&gt;各硬件装置在Linux中的档名&lt;/h2&gt;

&lt;p&gt;在Linux系统中，每个装置都被当成一个文件来对待，在Linux这个系统当中，几乎所有的硬件装置文件都在/dev这个目录内。&lt;/p&gt;

&lt;p&gt;以下列出几个常见的装置与其在Linux当中的档名：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;装置&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;装置在Linux内的档名&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;IDE硬盘机&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;/dev/hd[a-d]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;SCSI/SATA/U盘硬盘机&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;/dev/sd[a-p]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;U盘快闪碟&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;/dev/sd[a-p]  (与SATA相同)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;软盘机&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;/dev/fd[0-1]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;打印机&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;25针: /dev/lp[0-2]     U盘: /dev/usb/lp[0-15]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;鼠标&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;U盘: /dev/usb/mouse[0-15]    PS2: /dev/psaux&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;当前CDROM/DVDROM&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;/dev/cdrom&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;当前的鼠标&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;/dev/mouse&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;磁带机&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;IDE: /dev/ht0SCSI: /dev/st0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;关于在Linux下的各种不同介面的磁碟的装置档名：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;IDE介面&lt;/p&gt;

    &lt;p&gt;由于一个IDE排线可以连接两个IDE装置，又通常主机都会提供两个IDE介面，因此最多可以接到四个IDE装置。这两个IDE介面通常被称为IDE1及IDE2， 而每条排线上面的IDE装置可以被区分为Master与Slave。这四个IDE装置的档名为：&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;IDE\Jumper&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;Master&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;Slave&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;IDE1(Primary)&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;/dev/hda&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;/dev/hdb&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;IDE2(Secondary)&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;/dev/hdc&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;/dev/hdd&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SATA介面&lt;/p&gt;

    &lt;p&gt;由于SATA/U盘/SCSI等磁碟介面都是使用SCSI模块来驱动的， 因此这些介面的磁碟装置档名都是/dev/sd[a-p]的格式。 但是与IDE介面不同的是，SATA/U盘介面的磁碟根本就没有一定的顺序，那么使用的是按照侦测到的顺序来决定装置档名，并非与实际插槽代号有关。&lt;/p&gt;

    &lt;p&gt;例如:如果你的PC上面有两个SATA磁碟以及一个U盘磁碟，而主板上面有六个SATA的插槽。这两个SATA磁碟分别安插在主板上的SATA1, SATA5插槽上，这SATA1、SATA5、U盘磁碟(启动完成后才被系统捉到)三个磁碟在Linux中的装置档名分别是/dev/sda、/dev/sdb、/dev/sdc。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 25 Jul 2017 00:00:00 +0800</pubDate>
        <link>https://tingtinZ.github.io/2017/07/25/Linux-learn.html</link>
        <guid isPermaLink="true">https://tingtinZ.github.io/2017/07/25/Linux-learn.html</guid>
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>使用securecrt连接虚拟机内的 Ubuntu 系统</title>
        <description>&lt;h1 id=&quot;使用securecrt-连接虚拟机内的-ubuntu-系统&quot;&gt;使用securecrt 连接虚拟机内的 Ubuntu 系统&lt;/h1&gt;
&lt;h2 id=&quot;关于securecrt&quot;&gt;关于securecrt&lt;/h2&gt;
&lt;p&gt;SecureCRT是一款支持SSH（SSH1和SSH2）的终端仿真程序，简单地说是Windows下登录UNIX或Linux服务器主机的软件。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;配置&quot;&gt;配置&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;设置虚拟机的网络模式，NAT或桥接。&lt;/li&gt;
  &lt;li&gt;在Ubuntu上用&lt;code class=&quot;highlighter-rouge&quot;&gt;ifconfig&lt;/code&gt;命令查看IP地址信息。
```
[zhuangtingting@ ~]$ ifconfig
enp0s3    Link encap:Ethernet  HWaddr 08:00:27:e9:50:03&lt;br /&gt;
       inet addr:10.0.0.176  Bcast:10.0.0.255  Mask:255.255.255.0
       inet6 addr: fe80::378a:3320:64c7:7952/64 Scope:Link
       UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
       RX packets:405 errors:0 dropped:0 overruns:0 frame:0
       TX packets:397 errors:0 dropped:0 overruns:0 carrier:0
       collisions:0 txqueuelen:1000 
       RX bytes:143029 (143.0 KB)  TX bytes:73878 (73.8 KB)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;lo        Link encap:Local Loopback&lt;br /&gt;
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:65536  Metric:1
          RX packets:157 errors:0 dropped:0 overruns:0 frame:0
          TX packets:157 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1 
          RX bytes:15404 (15.4 KB)  TX bytes:15404 (15.4 KB)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;这里我的IP地址是10.0.0.176

## 安装SSH
1. 在Ubuntu上使用`ssh username@localhost`命令检查是否已经安装SSH服务。
2. 若无，则安装SSH
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;$ sudo apt-get install openssh-server&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;3. 查看是否有进程在22端口上监听，即是否已启动：
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;[zhuangtingting@ ~]$ netstat -nat | grep 22
tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN   &lt;br /&gt;
tcp6       0      0 :::22                   :::*                    LISTEN
```&lt;/p&gt;
&lt;h2 id=&quot;securecrt连接ubuntu&quot;&gt;SecureCRT连接Ubuntu&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;打开SecureCRT软件，进行配置。ProtoCol模式选为SSH2，Port为22，HostName为192.168.172.168（就是我们Ubuntu的IP地址），UserName为我们Ubuntu的登录账户。&lt;/li&gt;
  &lt;li&gt;点击“Connect”后，PassWord为我们Ubuntu的登录密码。&lt;/li&gt;
  &lt;li&gt;现在就可以尝试输入linux命令检验成果。
    &lt;h2 id=&quot;遇到的问题&quot;&gt;遇到的问题&lt;/h2&gt;
    &lt;p&gt;如此配置之后，发现在宿主机上浏览器访问不了页面了。&lt;/p&gt;
    &lt;blockquote&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.linuxidc.com/Linux/2015-05/117048.htm&quot;&gt;SecureCRT连接Ubuntu参考教程&lt;/a&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Mon, 24 Jul 2017 00:00:00 +0800</pubDate>
        <link>https://tingtinZ.github.io/2017/07/24/securecrt-earn.html</link>
        <guid isPermaLink="true">https://tingtinZ.github.io/2017/07/24/securecrt-earn.html</guid>
        
        <category>securecrt</category>
        
      </item>
    
      <item>
        <title>Git学习</title>
        <description>&lt;h1 id=&quot;git学习总结&quot;&gt;Git学习总结&lt;/h1&gt;

&lt;h2 id=&quot;初始git&quot;&gt;初始GIT&lt;/h2&gt;

&lt;p&gt;​	Git是一款开源的分布式版本控制系统，是用于Linux内核开发的版本控制工具。究其历史，起是Linus开发Git是为了作为一种过渡方案来代替BitKeeper，但发展到今日，Git分布式的优越性让越来越多人使用，如今在LInux、Unix、Mac和Windows这几大平台上都能够运行。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;git常用命令&quot;&gt;Git常用命令&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git&lt;/code&gt; 查看git是否安装&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install git&lt;/code&gt; 安装git&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git config&lt;/code&gt; 设置名字和email地址&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git init&lt;/code&gt; 初始化仓库&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git add&lt;/code&gt; 添加文件到仓库&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit&lt;/code&gt; 把文件提交到仓库&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt; 查看仓库状态&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git diff&lt;/code&gt; 查看文件的修改&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt; 查看提交日志&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git reset&lt;/code&gt; 版本回退（&lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt; 表示当前版本，&lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD^&lt;/code&gt; 表示上一个版本，&lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD^^&lt;/code&gt; 表示上上个版本，用&lt;code class=&quot;highlighter-rouge&quot;&gt;commit id&lt;/code&gt; 可以指定回到某个版本，当使用&lt;code class=&quot;highlighter-rouge&quot;&gt;git reset HEAD file&lt;/code&gt;可以把暂存区的修改回退到工作区）&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git relog&lt;/code&gt; 查看命令历史，每个版本的&lt;code class=&quot;highlighter-rouge&quot;&gt;commit id&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout -- file&lt;/code&gt; 丢弃工作区的修改（没有&lt;code class=&quot;highlighter-rouge&quot;&gt;--&lt;/code&gt;，就变成了“切换到另一个分支”的命令）&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git rm&lt;/code&gt; 删除（注意接着还要&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit&lt;/code&gt;)&lt;/p&gt;

&lt;h2 id=&quot;工作区暂存区master分支&quot;&gt;工作区、暂存区、master分支&lt;/h2&gt;

&lt;p&gt;​	工作区有一个隐藏目录&lt;code class=&quot;highlighter-rouge&quot;&gt;.git&lt;/code&gt;是Git的版本库。版本库里有一个称为stage或index 的暂存区。在创建时版本库时，Git自动为我们创建了唯一一个&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;分支。&lt;/p&gt;

&lt;p&gt;​	建立版本库并提交文件的状态可描绘为：&lt;/p&gt;

&lt;p&gt;​	工作区存在需要提交到版本库的文件时，用&lt;code class=&quot;highlighter-rouge&quot;&gt;git add&lt;/code&gt;命令添加文件时实际上将文件修改添加到暂存区。接着用&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit&lt;/code&gt;提交更改时实际上是把暂存区的所有内容提交到&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;分支。&lt;/p&gt;

&lt;p&gt;​	如果不添加到暂存区，那么所做的修改是无法单单通过&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit&lt;/code&gt;提交到仓库的。&lt;/p&gt;

&lt;h2 id=&quot;github&quot;&gt;GitHub&lt;/h2&gt;

 	GitHub是一个提供Git仓库托管服务的网站，在上面可以免费获得Git远程仓库。

&lt;p&gt;​	由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以在使用前需要创建SSH Key。&lt;/p&gt;

&lt;p&gt;​	在GitHub上，可以创建一个GitHub仓库，再把一个本地仓库与之关联，就可以把本地仓库的内容推送到Git仓库中。实现方法：在本地仓库下运行命令：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;zhuangtingting@zhuangtingting-VirtualBox:~/learngit$ git remote add origin git@github.com:tingtingZ/learngit.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;​	其中，“tingtingZ“是GitHub账户名。&lt;/p&gt;

&lt;p&gt;​	接下来，使用&lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt;命令，把当前分支&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;推送到远程。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;zhuangtingting@zhuangtingting-VirtualBox:~/learngit$ git push -u origin master
Username for 'https://github.com': tingtinZ
Password for 'https://tingtinZ@github.com': 
Counting objects: 9, done.
Compressing objects: 100% (6/6), done.
Writing objects: 100% (9/9), 779 bytes | 0 bytes/s, done.
Total 9 (delta 1), reused 0 (delta 0)
remote: Resolving deltas: 100% (1/1), done.
To https://github.com/tingtinZ/learngit.git
 * [new branch]      master -&amp;gt; master
Branch master set up to track remote branch master from origin.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;​	使用命令&lt;code class=&quot;highlighter-rouge&quot;&gt;git push -u origin master&lt;/code&gt;第一次推送master分支的所有内容。&lt;/p&gt;

&lt;p&gt;​	此后，每次本地提交后，只要有必要，就可以使用命令&lt;code class=&quot;highlighter-rouge&quot;&gt;git push origin master&lt;/code&gt;推送最新修改。&lt;/p&gt;

&lt;h2 id=&quot;学习中出现的问题及解决&quot;&gt;学习中出现的问题及解决&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;问题1：使用&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit&lt;/code&gt; 命令将文件提交到仓库时出现“Please tell me who you are”的提示。&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;zhuangtingting@zhuangtingting-VirtualBox:~/learngit$ git commit -m &quot;wrote a readme file&quot;

*** Please tell me who you are.

Run

  git config --global user.email &quot;you@example.com&quot;
  git config --global user.name &quot;Your Name&quot;

to set your account's default identity.
Omit --global to set the identity only in this repository.

fatal: unable to auto-detect email address (got 'zhuangtingting@zhuangtingting-VirtualBox.(none)')
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;解决：Git是分布式版本控制系统，必须要通过设置名字和email地址。这里因为安装后没有进行这一个步骤，所以出现该提示。用&lt;code class=&quot;highlighter-rouge&quot;&gt;git config&lt;/code&gt;命令设置之后，&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit&lt;/code&gt; 正常运行。&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;zhuangtingting@zhuangtingting-VirtualBox:~/learngit$ git config user.email &quot;634545656@qq.com&quot;
zhuangtingting@zhuangtingting-VirtualBox:~/learngit$ git config user.name &quot;zhuangtingting&quot;
zhuangtingting@zhuangtingting-VirtualBox:~/learngit$ git commit -m &quot;wrote a readme file&quot;
[master (root-commit) 11cbb73] wrote a readme file
 1 file changed, 2 insertions(+)
 create mode 100644 readme.txt
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;问题2：在使用git push&lt;code class=&quot;highlighter-rouge&quot;&gt;命令把当前分支&lt;/code&gt;master`推送到远程时，出现” Repository not found.”的错误提示，显示仓库没有找到。&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;zhuangtingting@zhuangtingting-VirtualBox:~/learngit$ git push -u origin master
The authenticity of host 'github.com (192.30.255.112)' can't be established.
RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added 'github.com,192.30.255.112' (RSA) to the list of known hosts.
ERROR: Repository not found.
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;解决：使用&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh git@github.com&lt;/code&gt; 命令测试是否能连接到GitHub时：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@zhuangtingting-VirtualBox:/home/zhuangtingting/learngit# ssh git@github.comThe authenticity of host 'github.com (192.30.255.113)' can't be established.
RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added 'github.com,192.30.255.113' (RSA) to the list of known hosts.
PTY allocation request failed on channel 0
Hi tingtinZ! You've successfully authenticated, but GitHub does not provide shell access.
Connection to github.com closed.
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;结果属于正常回显，证明可以正常连接到GitHub。&lt;/p&gt;

    &lt;p&gt;删除原先设置的远程仓库origin，再重新添加远程仓库后，不再出现此错误，成功运行。&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;zhuangtingting@zhuangtingting-VirtualBox:~/learngit$ git push -u origin master
Username for 'https://github.com': tingtinZ
Password for 'https://tingtinZ@github.com': 
Counting objects: 9, done.
Compressing objects: 100% (6/6), done.
Writing objects: 100% (9/9), 779 bytes | 0 bytes/s, done.
Total 9 (delta 1), reused 0 (delta 0)
remote: Resolving deltas: 100% (1/1), done.
To https://github.com/tingtinZ/learngit.git
 * [new branch]      master -&amp;gt; master
Branch master set up to track remote branch master from origin.
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;​&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Thu, 20 Jul 2017 00:00:00 +0800</pubDate>
        <link>https://tingtinZ.github.io/2017/07/20/git-learn.html</link>
        <guid isPermaLink="true">https://tingtinZ.github.io/2017/07/20/git-learn.html</guid>
        
        <category>Git</category>
        
      </item>
    
      <item>
        <title>Markdown学习</title>
        <description>&lt;h1 id=&quot;markdown学习总结&quot;&gt;Markdown学习总结&lt;/h1&gt;

&lt;h2 id=&quot;一什么是markdown&quot;&gt;一、什么是Markdown&lt;/h2&gt;

&lt;p&gt;​	Markdown 是一种轻量级标记语言，通过使用一些简单的符号（* / ` &amp;gt; [] () #）来标记文本格式，可以导出成PDF、HTML、WORD等多种格式。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;二markdown的优点&quot;&gt;二、Markdown的优点&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;语法简单。使用简单的符号标记格式，简单易学。&lt;/li&gt;
  &lt;li&gt;兼容性强。Markdown 是兼容性非常强的纯文本内容，可以使用任何编辑器打开，格式都不会乱。&lt;/li&gt;
  &lt;li&gt;导出方便。Markdown 可以导出 PDF、Word、HTML、Epub、LaTeX 等文件格式。&lt;/li&gt;
  &lt;li&gt;专注内容。不用纠结排版问题。&lt;/li&gt;
  &lt;li&gt;团队协作。 Github、Gitlab、Gitbook 都支持 Markdown，便于团队协作。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;三markdown不适用的情况&quot;&gt;三、Markdown不适用的情况&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;需要复杂排版的时候，比如纸版图书编辑就不太适合用 Markdown。我的做法是从 Markdown 导出 Word 文档，然后交给编辑。&lt;/li&gt;
  &lt;li&gt;需要复杂表格的时候，因为 Markdown 对表格的支持太简单了。&lt;/li&gt;
  &lt;li&gt;需要调整图片大小或直接贴本地图片的时候。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;四markdown的常用语法&quot;&gt;四、Markdown的常用语法&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;标题&lt;/p&gt;

    &lt;p&gt;行首通过“#”数量表示几级标题，一共只有1~6级标题，1级标题字体最大。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;粗体&lt;/p&gt;

    &lt;p&gt;将需要设置为斜体的文字两端使用2个“*”包含起来。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;斜体&lt;/p&gt;

    &lt;p&gt;将需要设置为斜体的文字两端使用1个“*”包含起来。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;有序列表&lt;/p&gt;

    &lt;p&gt;使用数字后面跟上句号，并空格。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;无序列表&lt;/p&gt;

    &lt;p&gt;在文字开头添加(*, +, -)实现无序列表，但是要注意和文字之间需要添加空格。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;引用&lt;/p&gt;

    &lt;p&gt;开头添加“&amp;gt;”表示。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;图片&lt;/p&gt;

    &lt;p&gt;语法：&lt;code class=&quot;highlighter-rouge&quot;&gt;![]()&lt;/code&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;链接：&lt;/p&gt;

    &lt;p&gt;语法：&lt;code class=&quot;highlighter-rouge&quot;&gt;[]()。&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;代码&lt;/p&gt;

    &lt;p&gt;第一种：简单文字出现一个代码框。使用&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;blockquote&amp;gt;&lt;/code&gt;。
第二种：大片文字需要实现代码框。使用Tab和四个空格。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;五支持markdown-的软件及网站&quot;&gt;五、支持Markdown 的软件及网站&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;不同系统下常用的Markdown编辑器&lt;/p&gt;

    &lt;p&gt;Windows：MarkdownPad、Smark、Atom、VSCode、Miu、Typora、RStudio&lt;/p&gt;

    &lt;p&gt;Linux：VSCode、Atom、ReText、UberWriter、RStudio&lt;/p&gt;

    &lt;p&gt;OSX：VSCode、Atom、Byword、Mou、Typora、MacDown、RStudio&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在线网站&lt;/p&gt;

    &lt;p&gt;简书、知乎、CSDN、Github、Gitlab、Gitboo&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;六总结&quot;&gt;六、总结&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;学习中遇到的问题：&lt;/p&gt;

    &lt;p&gt;（1）刚开始下载的编辑器是MarkdownPad，但是安装失败。&lt;/p&gt;

    &lt;p&gt;（2）Typora上使用嵌入实现居中效果时，并没有渲染出效果。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;问题的解决：&lt;/p&gt;

    &lt;p&gt;（1）没有成功解决安装失败的问题，安装了另一款编辑器Typora。&lt;/p&gt;

    &lt;p&gt;（2）通过查阅资料得知该效果在导出文件时才能显现。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;学习心得：&lt;/p&gt;

    &lt;p&gt;​	通过查阅资料了解到Markdown的概念及语法，并进行实践，在windows7系统下安装支持Markdown的Typora编辑器后进行编辑。在Typora 的使用上，Typora 的菜单栏对于标题、段落、列表、表格等的格式排版给予了很大的便利。Typora 的编辑与预览融为一体，回车后立即渲染效果，但是却不能再次编辑。另外，对于一些嵌入也不能进行预览，需要导出后才能观察到效果。在Markdown的实践学习体会上，深深的体会到Markdown相对于word等编辑对于并不用到word太多功能的使用者来说，使用Markdown能够轻松进行要求不太高的排版，而且在导出上导出的格式多样，消除了因为要编辑不同格式的文件而下载诸多编辑器和软件的麻烦。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Wed, 19 Jul 2017 00:00:00 +0800</pubDate>
        <link>https://tingtinZ.github.io/2017/07/19/markdown-learn.html</link>
        <guid isPermaLink="true">https://tingtinZ.github.io/2017/07/19/markdown-learn.html</guid>
        
        <category>Markdown</category>
        
      </item>
    
  </channel>
</rss>
